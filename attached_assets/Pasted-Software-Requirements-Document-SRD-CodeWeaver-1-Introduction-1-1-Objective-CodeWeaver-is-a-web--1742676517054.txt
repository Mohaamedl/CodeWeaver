Software Requirements Document (SRD) – CodeWeaver
1. Introduction
1.1 Objective
CodeWeaver is a web-based tool designed for software developers to streamline two essential processes:

Codebase Analysis: Allows users to import and analyze GitHub repositories, offering practical suggestions for improving code organization and architecture.
Interactive Assistant: Provides an AI-driven conversational interface to assist in creating new projects by recommending architectures, technology stacks, and generating an initial codebase kit.
This SRD defines the functional and non-functional requirements, system architecture, user interactions, integrations, testing plans, and development priorities to guide the implementation of CodeWeaver.

1.2 Scope
CodeWeaver will include two core features:

Codebase Analysis: Integrates with the GitHub API to list repositories, display an interactive directory tree, and suggest improvements based on design patterns and best practices.
Interactive Assistant: An AI-powered module that collects user requirements through dynamic questions and delivers an exportable architectural plan and starter codebase.
The project will roll out in phases:

Phase 1: Basic GitHub integration and a simplified assistant.
Phase 2: Advanced features like detailed code analysis and GitHub Actions automation.
1.3 Stakeholders
Developers: Primary users, from beginners to experts, looking to enhance existing projects or start new ones.
DevOps Teams: Interested in CI/CD integrations and automation workflows.
Technical Managers: Need clear architectural plans for team alignment.
Development Team: Responsible for building and maintaining the system.
1.4 Definitions and Acronyms
OAuth: Authentication protocol for GitHub integration.
JWT: JSON Web Token for session management.
API: Application Programming Interface (e.g., GitHub API, OpenAI API).
CI/CD: Continuous Integration/Continuous Deployment.
GDPR/LGPD: Data protection regulations (Europe and Brazil).
2. System Overview
2.1 Main Components
Frontend: Built with React (JavaScript library), TypeScript (static typing), Tailwind CSS (styling), and optionally Redux (state management).
Backend: RESTful API using Node.js and Express.js for business logic, integrations, and session handling.
Database: MongoDB (NoSQL) for storing sessions, interaction history, and user metadata.
External Services:
GitHub API: Handles authentication and repository access.
OpenAI API: Powers the AI-driven assistant.
2.2 User Flows
2.2.1 Flow 1: Codebase Analysis
This flow outlines how users import and analyze a GitHub repository:

Start: Home screen displays two buttons:
"Connect with GitHub" (triggers authentication).
"Start Assistant" (launches the assistant).
Authentication:
User clicks "Connect with GitHub".
Redirected to GitHub OAuth page.
Returns to CodeWeaver with an access token after approval.
Repository Listing:
Displays a table with:
Repository Name (e.g., "my-project").
Description (e.g., "Task management system").
Main Language (e.g., "JavaScript").
Status (public/private, based on OAuth scope).
Features filters (search by name) and sorting (by date or name).
Selection:
User selects a repository (e.g., "my-project").
System fetches directory structure via GitHub API.
Tree Visualization:
Interactive tree shows:
Root: Repository name.
Nodes: Folders (e.g., "src/") and files (e.g., "index.js").
Interactivity: Expand/collapse with +/- icons.
File Details: Clicking a file reveals type (e.g., ".js"), size (e.g., "12 KB"), and last modified date (e.g., "2023-10-15 14:32").
Architectural Suggestions:
Shown in a side panel or tooltips, e.g., "Consider moving business logic to 'src/services/' for better Separation of Concerns."
2.2.2 Flow 2: Interactive Assistant
This flow assists users in creating a new project:

Start:
User clicks "Start Assistant".
Opens a chat interface.
Initial Question:
"What is your level of experience in software development?"
Options: "Beginner" (simple terms), "Intermediate" (balanced), "Advanced" (technical).
Conversational Roadmap:
Dynamic questions adapt based on responses:
"What is the main objective of your system?" (e.g., "Task management system").
"Which technology stack do you prefer?" (e.g., "Python with Django" or "Suggest something").
"How many clients initially? In one year?" (e.g., "100 now, 10,000 later").
"What are the response time requirements?" (e.g., "< 1 second").
"Will it need to scale? How?" (e.g., "Yes, with containers").
"What are the maintenance plans?" (e.g., "Monthly updates").
"Do you need a UI? What type?" (e.g., "Yes, web with React").
"Any external integrations?" (e.g., "Google Calendar").
"Testing and CI/CD requirements?" (e.g., "Unit tests, GitHub Actions").
"Preferred architecture?" (e.g., "Microservices").
"Relevant design patterns?" (e.g., "DDD").
Questions adjust based on prior answers (e.g., suggesting "Next.js" if React is chosen).
Result:
Outputs:
Architectural Plan: Text description (e.g., "Microservices with Node.js, React frontend, MongoDB").
Initial Kit: Folder structure (e.g., "src/controllers/") and sample files (e.g., "server.js").
3. Functional Requirements
3.1 Home Screen and Authentication
RF-1: Home screen includes:
Buttons: "Connect with GitHub" and "Start Assistant".
Theme toggle (Light/Dark) in the top-right corner.
Centered "CodeWeaver" logo and title.
RF-2: Authentication:
GitHub OAuth flow with redirection and token retrieval.
Optional email/password login with JWT (1-hour expiration).
3.2 Codebase Analysis
RF-3: Repository import:
Endpoint: GET /api/repositories.
Returns: JSON with name, description, language, private.
RF-4: Interactive tree:
React component with expand/collapse functionality.
File details via GET /api/repository/:repo/files/:path.
RF-5: Suggestions:
Backend heuristics detect issues (e.g., mixed logic in "routes/").
Suggests patterns (e.g., "Move to 'controllers/' for MVC").
3.3 Interactive Assistant
RF-6: Starts with an experience-level question (clickable options).
RF-7: Adaptive roadmap:
Minimum 15-question bank with branching logic.
RF-8: Context:
Sends last 10 messages to OpenAI API.
RF-9: Output:
Structured plan and ZIP file with initial kit (e.g., "package.json").
3.4 Export and Integration
RF-10: Export options:
PDF, Markdown, JSON, YAML via an "Export" button with dropdown.
RF-11: GitHub Actions (Phase 2):
Generates workflow YAML (e.g., "test-and-deploy.yml").
4. Non-Functional Requirements
4.1 Performance
RNF-1: Assistant latency < 2s (95% of requests).
RNF-2: Analysis < 10s for repositories ≤ 10 MB; progress bar for larger ones.
RNF-3: UI loads in < 3s.
4.2 Security
RNF-4: Encrypt tokens (AES-256) in database and transit (TLS 1.3).
RNF-5: Protect endpoints with JWT or OAuth.
RNF-6: Validate inputs to prevent SQL Injection and XSS.
RNF-7: GDPR/LGPD compliance:
Consent for data collection.
Data deletion endpoint: DELETE /api/user/data.
4.3 Usability
RNF-8: WCAG 2.1 AA-compliant interface.
RNF-9: First-run tutorials.
4.4 Scalability
RNF-10: Stateless backend with load balancing.
RNF-11: MongoDB with indexes on userId and timestamp.
4.5 Reliability
RNF-12: 99.9% uptime.
RNF-13: Daily MongoDB backups.
5. System Architecture
5.1 Components
Frontend: React 18, TypeScript 5, Tailwind CSS 3.
Backend: Node.js 20, Express.js 4 (routes, services, models).
Database: MongoDB 6 (AWS Atlas).
Integrations: GitHub API v3, OpenAI API v1.
5.2 Data Flow
Authentication: GET /auth/github → GitHub redirect → POST /auth/github/callback.
Analysis: GET /api/repositories → GitHub API → List; GET /api/repository/:repo/tree → Tree.
Assistant: POST /api/assistant → OpenAI API → Response.
5.3 Architecture Diagram
text

Collapse

Wrap

Copy
[User]
   ↓ (HTTPS)
[Frontend - React/TS]
   ↓ (REST API)
[Backend - Node.js/Express]
   ↙        ↘
[MongoDB]  [GitHub API / OpenAI API]
6. Integrations and Protocols
6.1 GitHub API
Version: v3.
Scopes: user, repo:read.
Rate Limit: 5,000 requests/hour; cached in Redis.
6.2 OpenAI API
Model: GPT-4o.
Context: Last 10 interactions (1,000-token limit).
6.3 Export
PDF: Includes header and table of contents.
Markdown: Structured with headings.
7. Session and History Management
Sessions: JWT in Authorization: Bearer <token> header.
History: MongoDB interactions collection:
json

Collapse

Wrap

Copy
{
  "userId": "123",
  "sessionId": "abc",
  "history": [
    {"role": "user", "content": "I want a web app", "timestamp": "2023-10-15T10:00:00Z"}
  ]
}
8. Security and Privacy
Encryption: Keys in AWS Secrets Manager.
Logs: Exclude sensitive data.
Compliance: Consent pop-up on first use.
9. Testing Plan
Unit Tests: 80% coverage (Jest).
Integration Tests: API mocks (Supertest).
E2E Tests: Full flows (Cypress).
Pipeline: GitHub Actions (test, build, deploy).
10. Documentation
User: Markdown guide with screenshots.
Technical: Swagger at GET /api-docs.
11. Prototype Priorities
Phase 1: GitHub authentication, repository listing, basic assistant (5 questions), Markdown export.
Phase 2: Interactive tree, suggestions, full assistant, multiple exports, GitHub Actions.