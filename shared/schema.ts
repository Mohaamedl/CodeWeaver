import { pgTable, text, serial, integer, boolean, jsonb, timestamp } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

// User table for authentication
export const users = pgTable("users", {
  id: serial("id").primaryKey(),
  username: text("username").notNull().unique(),
  password: text("password").notNull(),
  githubId: text("github_id").unique(),
  githubUsername: text("github_username"),
  githubAccessToken: text("github_access_token"),
  githubRefreshToken: text("github_refresh_token"),
});

// Repository analysis sessions
export const repositoryAnalyses = pgTable("repository_analyses", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").references(() => users.id),
  repositoryName: text("repository_name").notNull(),
  repositoryOwner: text("repository_owner").notNull(),
  analyzedAt: timestamp("analyzed_at").defaultNow(),
  structure: jsonb("structure").notNull(),
  suggestions: jsonb("suggestions").notNull(),
});

// Assistant conversations
export const assistantConversations = pgTable("assistant_conversations", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").references(() => users.id),
  startedAt: timestamp("started_at").defaultNow(),
  experienceLevel: text("experience_level"),
  projectObjective: text("project_objective"),
  technologyStack: text("technology_stack"),
  completed: boolean("completed").default(false),
});

// Messages in assistant conversations
export const assistantMessages = pgTable("assistant_messages", {
  id: serial("id").primaryKey(),
  conversationId: integer("conversation_id").references(() => assistantConversations.id),
  role: text("role").notNull(), // 'user' or 'assistant'
  content: text("content").notNull(),
  timestamp: timestamp("timestamp").defaultNow(),
});

// Architectural plans generated by the assistant
export const architecturalPlans = pgTable("architectural_plans", {
  id: serial("id").primaryKey(),
  conversationId: integer("conversation_id").references(() => assistantConversations.id),
  content: text("content").notNull(),
  starterKit: jsonb("starter_kit"),
  createdAt: timestamp("created_at").defaultNow(),
});

// Schema for user insertion
export const insertUserSchema = createInsertSchema(users).pick({
  username: true,
  password: true,
  githubId: true,
  githubUsername: true,
  githubAccessToken: true,
  githubRefreshToken: true,
});

// Schema for repository analysis insertion
export const insertRepositoryAnalysisSchema = createInsertSchema(repositoryAnalyses).pick({
  userId: true,
  repositoryName: true,
  repositoryOwner: true,
  structure: true,
  suggestions: true,
});

// Schema for assistant conversation insertion
export const insertAssistantConversationSchema = createInsertSchema(assistantConversations).pick({
  userId: true,
  experienceLevel: true,
  projectObjective: true,
  technologyStack: true,
});

// Schema for assistant message insertion
export const insertAssistantMessageSchema = createInsertSchema(assistantMessages).pick({
  conversationId: true,
  role: true,
  content: true,
});

// Schema for architectural plan insertion
export const insertArchitecturalPlanSchema = createInsertSchema(architecturalPlans).pick({
  conversationId: true,
  content: true,
  starterKit: true,
});

// Type exports
export type InsertUser = z.infer<typeof insertUserSchema>;
export type User = typeof users.$inferSelect;

export type InsertRepositoryAnalysis = z.infer<typeof insertRepositoryAnalysisSchema>;
export type RepositoryAnalysis = typeof repositoryAnalyses.$inferSelect;

export type InsertAssistantConversation = z.infer<typeof insertAssistantConversationSchema>;
export type AssistantConversation = typeof assistantConversations.$inferSelect;

export type InsertAssistantMessage = z.infer<typeof insertAssistantMessageSchema>;
export type AssistantMessage = typeof assistantMessages.$inferSelect;

export type InsertArchitecturalPlan = z.infer<typeof insertArchitecturalPlanSchema>;
export type ArchitecturalPlan = typeof architecturalPlans.$inferSelect;

// GitHub API response types
export type GitHubRepository = {
  id: number;
  name: string;
  description: string | null;
  language: string | null;
  private: boolean;
  updated_at: string;
  owner: {
    login: string;
  };
};

export type GitHubDirectoryItem = {
  name: string;
  path: string;
  type: 'dir' | 'file';
  size?: number;
  sha: string;
};

export type GitHubTreeItem = {
  path: string;
  mode: string;
  type: 'blob' | 'tree';
  sha: string;
  size?: number;
  url: string;
};

export type GitHubTree = {
  sha: string;
  url: string;
  tree: GitHubTreeItem[];
  truncated: boolean;
};

// Assistant API types
export type ExperienceLevel = 'beginner' | 'intermediate' | 'advanced';

// Message format for frontend use
export type AssistantMessageFormat = {
  role: 'user' | 'assistant';
  content: string;
};

export type ArchitecturalSuggestion = {
  type: 'info' | 'warning' | 'improvement';
  title: string;
  description: string;
};
